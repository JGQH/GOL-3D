{"version":3,"sources":["aux/Grid.js","components/Cell.js","sections/Drawer.js","sections/Controller.js","App.js","aux/hooks.js","index.js"],"names":["useGrid","state","useState","size","setSize","cells","setCells","data","setData","build","prob","bgt","blt","sgt","slt","newCells","Array","map","_","i","__","j","___","k","color","randomColor","isAlive","Math","random","reAlive","createCells","newData","useEffect","newState","func","plane","reduce","p","c","concat","cell","n","mapCells","loopCells","surroundings","push","getCell","filter","surroundingCells","count","length","colors","R","G","B","checkCells","updateCells","floor","forEach","planes","row","error","toHex","val","hex","toString","getColor","Cell","position","attach","opacity","transparent","Drawer","shifter","OrbitControls","intensity","angle","initialState","reducer","action","prop","Controller","isAnimating","switchAnimation","doGrid","useReducer","dispatch","doDispatch","className","type","value","min","max","onChange","e","target","onClick","App","rebuild","update","toggle","setToggle","useToggle","doAnimation","setInterval","clearInterval","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9df83b01.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useGrid = (state) => {\n    const [size, setSize] = useState(1);\n    const [cells, setCells] = useState([]);\n    const [data, setData] = useState({});\n\n    const build = ({ size, prob, bgt, blt, sgt, slt }) => {\n        const newCells = createCells(size, prob / 100);\n        const newData = { bgt, blt, sgt, slt };\n\n        setSize(size);\n        setCells(newCells);\n        setData(newData);\n    }\n\n    const update = () => {\n        //Update \"reAlive\" state of all cells\n        const newCells = [...cells]\n        checkCells(newCells, data);\n        updateCells(newCells);\n        setCells(newCells);\n    }\n\n    useEffect(() => {\n        build(state);\n    }, []);\n\n    return {\n        \"size\": size,\n        \"shifter\": (size - 1) / 2,\n        \"rebuild\": (newState) => build(newState),\n        \"map\": (func) => mapCells(cells, func),\n        \"update\": update\n    }\n}\n\nfunction randomColor() {\n    const R = Math.floor(Math.random() * 256);\n    const G = Math.floor(Math.random() * 256);\n    const B = Math.floor(Math.random() * 256);\n\n    return { R, G, B }\n}\n\nfunction createCells(size, prob) {\n    return [...new Array(size)].map((_, i) => {\n        return [...new Array(size)].map((__, j) => {\n            return [...new Array(size)].map((___, k) => ({\n                i:i,\n                j:j,\n                k:k,\n\n                color: randomColor(),\n                isAlive: Math.random() > prob,\n                reAlive: false\n            }));\n        });\n    });\n}\n\nfunction mapCells(cells, func) {\n    const planes = cells.map(plane => plane.reduce((p, c) => p.concat(c), []));\n    const cube = planes.reduce((p, c) => p.concat(c), []);\n    \n    return cube.map((cell, n) => func(cell, n));\n}\n\nfunction loopCells(cells, func) {\n    cells.forEach(planes => planes.forEach(row => row.forEach(cell => func(cell))));\n}\n\nfunction checkCells(cells, data) {\n    const { bgt, blt, sgt, slt } = data;\n\n    loopCells(cells, cell => {\n        const { i, j, k } = cell;\n\n        const surroundings = surroundingCells(i, j, k, cells);\n        const count = surroundings.length;\n\n        //Updating the cell\n        if(cell.isAlive) {\n            cell.reAlive = (sgt <= count) && (count <= slt);\n            return;\n        }\n\n        cell.reAlive = (bgt <= count) && (count <= blt);\n        if(cell.reAlive) {\n            const colors = surroundings.map(cell => cell.color);\n\n            let [R, G, B] = [0, 0, 0]\n\n            for(const color of colors) {\n                R += color.R;\n                G += color.G;\n                B += color.B;\n            }\n\n            R /= count;\n            G /= count;\n            B /= count;\n\n            cell.color = { R, G, B };\n        }\n    });\n}\n\nfunction updateCells(cells) {\n    loopCells(cells, cell => {\n        [cell.isAlive, cell.reAlive] = [cell.reAlive, false];\n    });\n}\n\nfunction getCell(i, j, k, cells) {\n    try {\n        return cells[i][j][k] || {isAlive:false};\n    } catch (error) {\n        return {isAlive:false};\n    }\n}\n\nfunction surroundingCells(i, j, k, cells) {\n    const surroundings = [];\n\n    //Top Plane\n    surroundings.push(getCell(i + 1, j + 1, k + 1, cells));\n    surroundings.push(getCell(i + 1, j + 1, k, cells));\n    surroundings.push(getCell(i + 1, j + 1, k - 1, cells));\n\n    surroundings.push(getCell(i + 1, j, k + 1, cells));\n    surroundings.push(getCell(i + 1, j, k, cells));\n    surroundings.push(getCell(i + 1, j, k - 1, cells));\n\n    surroundings.push(getCell(i + 1, j - 1, k + 1, cells));\n    surroundings.push(getCell(i + 1, j - 1, k, cells));\n    surroundings.push(getCell(i + 1, j - 1, k - 1, cells));\n\n    //Middle Plane\n    surroundings.push(getCell(i, j + 1, k + 1, cells));\n    surroundings.push(getCell(i, j + 1, k, cells));\n    surroundings.push(getCell(i, j + 1, k - 1, cells));\n\n    surroundings.push(getCell(i, j, k + 1, cells));\n    surroundings.push(getCell(i, j, k - 1, cells));\n\n    surroundings.push(getCell(i, j - 1, k + 1, cells));\n    surroundings.push(getCell(i, j - 1, k, cells));\n    surroundings.push(getCell(i, j - 1, k - 1, cells));\n\n    //Bottom Plane\n    surroundings.push(getCell(i - 1, j + 1, k + 1, cells));\n    surroundings.push(getCell(i - 1, j + 1, k, cells));\n    surroundings.push(getCell(i - 1, j + 1, k - 1, cells));\n\n    surroundings.push(getCell(i - 1, j, k + 1, cells));\n    surroundings.push(getCell(i - 1, j, k, cells));\n    surroundings.push(getCell(i - 1, j, k - 1, cells));\n\n    surroundings.push(getCell(i - 1, j - 1, k + 1, cells));\n    surroundings.push(getCell(i - 1, j - 1, k, cells));\n    surroundings.push(getCell(i - 1, j - 1, k - 1, cells));\n\n    return surroundings.filter(cell => cell.isAlive);\n}","function toHex(val) {\n    const hex = Math.floor(val).toString(16);\n    if(val < 16) {\n        return \"0\" + hex;\n    }\n    return hex;\n}\n\nfunction getColor(color) {\n    const R = toHex(color.R);\n    const G = toHex(color.G);\n    const B = toHex(color.B);\n\n    return `#${R}${G}${B}`;\n}\n\nconst Cell = ({position, color, isAlive}) => {\n    return (\n    <mesh position={position}>\n        <boxBufferGeometry attach=\"geometry\" />\n        <meshLambertMaterial attach=\"material\" color={getColor(color)} opacity={isAlive ? 1 : 0} transparent={!isAlive} />\n    </mesh>);\n}\n\nexport default Cell","import { Canvas } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport Cell from './../components/Cell';\n\nconst Drawer = ({ size, shifter, map }) => {\n    return (\n    <Canvas>\n        <OrbitControls />\n        <ambientLight intensity={0.5}  />\n        <spotLight position={[5 + size, 7 + size , 9 + size]} angle={0.3} />\n        {map((cell, n) => {\n            const { color, isAlive } = cell;\n            const position = [cell.i - shifter, cell.j - shifter, cell.k - shifter];\n\n            return <Cell key={n} {...{position, color, isAlive}} />\n        })}\n    </Canvas>)\n}\n\nexport default Drawer;","import { useReducer } from 'react';\n\nexport const initialState = {\n    \"size\": 5,\n    \"prob\": 75,\n    \"bgt\": 4,\n    \"blt\": 5,\n    \"sgt\": 5,\n    \"slt\": 5\n}\n\nfunction reducer(data, action) {\n    const { prop, val } = action;\n\n    const newData = {...data};\n    newData[prop] = +val;\n\n    return newData;\n}\n\nconst Controller = ({ isAnimating, switchAnimation, doGrid }) => {\n    const [ data, dispatch ] = useReducer(reducer, initialState);\n\n    function doDispatch(prop, val) {\n        dispatch({\"prop\":prop, \"val\":val});\n    }\n\n    return (\n    <>\n        <div className=\"gol-title gol-control\">\n            <h1>Conway's Game of Life</h1>\n        </div>\n        <div className=\"gol-size gol-control\">\n            <p>Size of grid: {data.size}</p>\n            <input type=\"range\" value={data.size} min={5} max={15} onChange={e => doDispatch(\"size\", e.target.value)} />\n        </div>\n        <div className=\"gol-chance gol-control\">\n            <p>Initial chance: {data.prob}%</p>\n            <input type=\"range\" value={data.prob} min={25} max={90} onChange={e => doDispatch(\"prob\", e.target.value)} />\n        </div>\n        <div className=\"gol-born gol-control\">\n            <p>Born if: {data.bgt}{\" <= C <= \"}{data.blt}</p>\n            <input type=\"range\" value={data.bgt} min={3} max={data.blt} onChange={e => doDispatch(\"bgt\", e.target.value)} />\n            <input type=\"range\" value={data.blt} min={data.bgt} max={15} onChange={e => doDispatch(\"blt\", e.target.value)} />\n        </div>\n        <div className=\"gol-survives gol-control\">\n            <p>Survives if: {data.sgt}{\" <= C <= \"}{data.slt}</p>\n            <input type=\"range\" value={data.sgt} min={3} max={data.slt} onChange={e => doDispatch(\"sgt\", e.target.value)} />\n            <input type=\"range\" value={data.slt} min={data.sgt} max={15} onChange={e => doDispatch(\"slt\", e.target.value)} />\n        </div>\n        <div className=\"gol-setter gol-control\">\n            <button onClick={() => switchAnimation()}>{isAnimating ? \"Pause\" : \"Play\"}</button>\n            <button onClick={() => doGrid(data)} >Apply changes</button>\n        </div>\n    </>)\n}\n\nexport default Controller;","import { useEffect } from 'react';\n\nimport { useGrid } from './aux/Grid'\nimport Drawer from './sections/Drawer';\nimport Controller, { initialState } from './sections/Controller';\nimport { useToggle } from './aux/hooks';\n\nconst App = () => {\n  const { size, shifter, rebuild, map, update } = useGrid(initialState);\n  const [isAnimating, switchAnimation] = useToggle(false);\n\n  function doGrid(newState) {\n    switchAnimation(false);\n\n    rebuild(newState);\n  }\n\n  useEffect(() => {\n    if(isAnimating) {\n      const doAnimation = setInterval(() => {\n        update();\n      }, 500);\n\n      return () => clearInterval(doAnimation);\n    }\n  }, [isAnimating]);\n\n  return (\n  <>\n    <div className=\"gol-drawer\">\n      <Drawer {...{size, shifter, map}} />\n    </div>\n    <div className=\"gol-controller\">\n      <Controller {...{isAnimating, switchAnimation, doGrid}} />\n    </div>\n  </>);\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport function useToggle(initialState) {\n    const [toggle, setToggle] = useState(initialState);\n\n    const doToggle = (newState = null) => {\n        if(newState === null) {\n            setToggle(!toggle);\n            return;\n        }\n\n        setToggle(newState);\n    };\n\n    return [toggle, doToggle];\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('cgol')\n);"],"sourceRoot":""}